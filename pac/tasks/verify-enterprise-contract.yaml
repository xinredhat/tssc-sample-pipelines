apiVersion: tekton.dev/v1
kind: Task
metadata:
  annotations:
    tekton.dev/displayName: Verify Enterprise Contract
    tekton.dev/pipelines.minVersion: "0.19"
    tekton.dev/tags: ec, chains, signature, conftest
  labels:
    app.kubernetes.io/version: "0.1"
  name: verify-enterprise-contract
spec:
  description: Verify the enterprise contract is met
  params:
  - description: |
      Spec section of an ApplicationSnapshot resource. Not all fields of the
      resource are required. A minimal example:

      ```json
        {
          "components": [
            {
              "containerImage": "quay.io/example/repo:latest"
            }
          ]
        }
      ```

      Each `containerImage` in the `components` array is validated.
    name: IMAGES
    type: string
  - default: enterprise-contract-service/default
    description: |
      Name of the policy configuration (EnterpriseContractPolicy
      resource) to use. `namespace/name` or `name` syntax supported. If
      namespace is omitted the namespace where the task runs is used.
      You can also specify a policy configuration using a git url, e.g.
      `github.com/enterprise-contract/config//slsa3`.
    name: POLICY_CONFIGURATION
    type: string
  - default: ""
    description: Public key used to verify signatures. Must be a valid k8s cosign
      reference, e.g. k8s://my-space/my-secret where my-secret contains the expected
      cosign.pub attribute.
    name: PUBLIC_KEY
    type: string
  - default: ""
    description: Rekor host for transparency log lookups
    name: REKOR_HOST
    type: string
  - default: "false"
    description: Skip Rekor transparency log checks during validation.
    name: IGNORE_REKOR
    type: string
  - default: ""
    description: TUF mirror URL. Provide a value when NOT using public sigstore deployment.
    name: TUF_MIRROR
    type: string
  - default: ""
    description: |
      Path to a directory containing SSL certs to be used when communicating
      with external services. This is useful when using the integrated registry
      and a local instance of Rekor on a development cluster which may use
      certificates issued by a not-commonly trusted root CA. In such cases,
      `/var/run/secrets/kubernetes.io/serviceaccount` is a good value. Multiple
      paths can be provided by using the `:` separator.
    name: SSL_CERT_DIR
    type: string
  - default: trusted-ca
    description: The name of the ConfigMap to read CA bundle data from.
    name: CA_TRUST_CONFIGMAP_NAME
    type: string
  - default: ca-bundle.crt
    description: The name of the key in the ConfigMap that contains the CA bundle
      data.
    name: CA_TRUST_CONFIG_MAP_KEY
    type: string
  - default: "true"
    description: Include rule titles and descriptions in the output. Set to `"false"`
      to disable it.
    name: INFO
    type: string
  - default: "true"
    description: Fail the task if policy fails. Set to `"false"` to disable it.
    name: STRICT
    type: string
  - default: /tekton/home
    description: Value for the HOME environment variable.
    name: HOMEDIR
    type: string
  - default: now
    description: Run policy checks with the provided time.
    name: EFFECTIVE_TIME
    type: string
  - default: ""
    description: Merge additional Rego variables into the policy data. Use syntax
      "key=value,key2=value2..."
    name: EXTRA_RULE_DATA
    type: string
  - default: ""
    description: |
      This param is deprecated and will be removed in future. Its value is ignored. EC will be run without a timeout. (If you do want to apply a timeout use the Tekton task timeout.)
    name: TIMEOUT
    type: string
  - default: "1"
    description: Number of parallel workers to use for policy evaluation.
    name: WORKERS
    type: string
  - default: "false"
    description: Reduce the Snapshot to only the component whose build caused the
      Snapshot to be created
    name: SINGLE_COMPONENT
    type: string
  - default: unknown
    description: |
      Name, including kind, of the Kubernetes resource to query for labels when single component mode is enabled, e.g. pr/somepipeline.
    name: SINGLE_COMPONENT_CUSTOM_RESOURCE
    type: string
  - default: ""
    description: |
      Kubernetes namespace where the SINGLE_COMPONENT_NAME is found. Only used when single component mode is enabled.
    name: SINGLE_COMPONENT_CUSTOM_RESOURCE_NS
    type: string
  results:
  - description: Short summary of the policy evaluation for each image
    name: TEST_OUTPUT
  stepTemplate:
    env:
    - name: HOME
      value: $(params.HOMEDIR)
  steps:
  - env:
    - name: TUF_MIRROR
      value: $(params.TUF_MIRROR)
    image: registry.redhat.io/rhtas/ec-rhel9:0.6
    name: initialize-tuf
    script: |-
      set -euo pipefail

      if [[ -z "${TUF_MIRROR:-}" ]]; then
          echo 'TUF_MIRROR parameter not provided. Skipping TUF root initialization.'
          exit
      fi

      echo 'Initializing TUF root...'
      ec sigstore initialize --mirror "${TUF_MIRROR}" --root "${TUF_MIRROR}/root.json"
      echo 'Done!'
  - command:
    - reduce-snapshot.sh
    env:
    - name: SNAPSHOT
      value: $(params.IMAGES)
    - name: SINGLE_COMPONENT
      value: $(params.SINGLE_COMPONENT)
    - name: CUSTOM_RESOURCE
      value: $(params.SINGLE_COMPONENT_CUSTOM_RESOURCE)
    - name: CUSTOM_RESOURCE_NAMESPACE
      value: $(params.SINGLE_COMPONENT_CUSTOM_RESOURCE_NS)
    - name: SNAPSHOT_PATH
      value: $(params.HOMEDIR)/snapshot.json
    image: registry.redhat.io/rhtas/ec-rhel9:0.6
    name: reduce
    onError: continue
  - args:
    - validate
    - image
    - --verbose
    - --images
    - /tekton/home/snapshot.json
    - --policy
    - $(params.POLICY_CONFIGURATION)
    - --public-key
    - $(params.PUBLIC_KEY)
    - --rekor-url
    - $(params.REKOR_HOST)
    - --ignore-rekor=$(params.IGNORE_REKOR)
    - --workers
    - $(params.WORKERS)
    - --info=$(params.INFO)
    - --timeout=100h
    - --strict=false
    - --show-successes
    - --effective-time=$(params.EFFECTIVE_TIME)
    - --extra-rule-data=$(params.EXTRA_RULE_DATA)
    - --output
    - text?show-successes=false
    - --output
    - appstudio=$(results.TEST_OUTPUT.path)
    - --output
    - json=$(params.HOMEDIR)/report-json.json
    - --logfile=$(params.HOMEDIR)/debug.log
    command:
    - ec
    computeResources:
      limits:
        memory: 2Gi
      requests:
        cpu: 250m
        memory: 2Gi
    env:
    - name: SSL_CERT_DIR
      value: /tekton-custom-certs:/etc/ssl/certs:/etc/pki/tls/certs:/system/etc/security/cacerts:$(params.SSL_CERT_DIR)
    - name: EC_CACHE
      value: "false"
    image: registry.redhat.io/rhtas/ec-rhel9:0.6
    name: validate
    onError: continue
    volumeMounts:
    - mountPath: /etc/pki/tls/certs/ca-custom-bundle.crt
      name: trusted-ca
      readOnly: true
      subPath: ca-bundle.crt
  - args:
    - $(params.HOMEDIR)/report-json.json
    command:
    - cat
    image: registry.redhat.io/rhtas/ec-rhel9:0.6
    name: report-json
    onError: continue
  - args:
    - .
    - $(results.TEST_OUTPUT.path)
    command:
    - jq
    image: registry.redhat.io/rhtas/ec-rhel9:0.6
    name: summary
    onError: continue
  - args:
    - |
      ----- DEBUG OUTPUT -----
    command:
    - printf
    image: registry.redhat.io/rhtas/ec-rhel9:0.6
    name: info
  - args:
    - version
    command:
    - ec
    image: registry.redhat.io/rhtas/ec-rhel9:0.6
    name: version
  - args:
    - $(params.HOMEDIR)/debug.log
    command:
    - cat
    image: registry.redhat.io/rhtas/ec-rhel9:0.6
    name: debug-log
  - args:
    - --argjson
    - strict
    - $(params.STRICT)
    - -e
    - |
      .result == "SUCCESS" or .result == "WARNING" or ($strict | not)
    - $(results.TEST_OUTPUT.path)
    command:
    - jq
    image: registry.redhat.io/rhtas/ec-rhel9:0.6
    name: assert
  - image: registry.redhat.io/openshift4/ose-cli:4.13@sha256:73df37794ffff7de1101016c23dc623e4990810390ebdabcbbfa065214352c7c
    name: annotate-task
    script: |
      #!/usr/bin/env bash
      echo "verify-enterprise-contract $(context.taskRun.name)"
      oc annotate taskrun $(context.taskRun.name) task.results.format=application/json
      oc annotate taskrun $(context.taskRun.name) task.results.type=ec
      oc annotate taskrun $(context.taskRun.name) task.results.container=step-report-json
      oc annotate taskrun $(context.taskRun.name) task.output.location=logs
  volumes:
  - configMap:
      items:
      - key: $(params.CA_TRUST_CONFIG_MAP_KEY)
        path: ca-bundle.crt
      name: $(params.CA_TRUST_CONFIGMAP_NAME)
      optional: true
    name: trusted-ca
  workspaces:
  - description: The workspace where the snapshot spec json file resides
    name: data
    optional: true
